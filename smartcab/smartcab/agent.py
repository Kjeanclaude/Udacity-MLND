import random
import math
from environment import Agent, Environment
from planner import RoutePlanner
from simulator import Simulator

class LearningAgent(Agent):
    """ An agent that learns to drive in the Smartcab world.
        This is the object you will be modifying. """ 

    def __init__(self, env, learning=False, epsilon=1.0, alpha=0.5):
        super(LearningAgent, self).__init__(env)     # Set the agent in the evironment 
        self.planner = RoutePlanner(self.env, self)  # Create a route planner 
        self.valid_actions = self.env.valid_actions  # The set of valid actions 

        # Set parameters of the learning agent
        self.learning = learning # Whether the agent is expected to learn
        self.Q = dict()          # Create a Q-table which will be a dictionary of tuples
        self.epsilon = epsilon   # Random exploration factor
        self.alpha = alpha       # Learning factor

        ###########
        ## TO DO ##
        ###########
        # Set any additional class parameters as needed
        self.state = None
        self.action_dict = dict()
        self.n_test = 10   # Number of trials
        


    def reset(self, destination=None, testing=False):
        """ The reset function is called at the beginning of each trial.
            'testing' is set to True if testing trials are being used
            once training trials have completed. """

        # Select the destination as the new location to route to
        self.planner.route_to(destination)
        
        ########### 
        ## TO DO ##
        ###########
        # Update epsilon using a decay function of your choice
        # Update additional class parameters as needed
        # If 'testing' is True, set epsilon and alpha to 0
        
        # sim_default-learning
        #self.epsilon -= 0.05

        # sim_improved-learning
        #a = 0.5142448 # 0 < a < 1
        #self.epsilon -= pow(a, self.n_test)
        self.epsilon -= pow(self.alpha, self.n_test)
        
        if testing:
            self.epsilon = 0
            self.alpha = 0

        return None

    def build_state(self):
        """ The build_state function is called when the agent requests data from the 
            environment. The next waypoint, the intersection inputs, and the deadline 
            are all features available to the agent. """

        # Collect data about the environment
        waypoint = self.planner.next_waypoint() # The next waypoint 
        inputs = self.env.sense(self)           # Visual input - intersection light and traffic
        deadline = self.env.get_deadline(self)  # Remaining deadline

        ########### 
        ## TO DO ##
        ###########
        # Set 'state' as a tuple of relevant data for the agent
        # When learning, check if the state is in the Q-table
        #   If it is not, create a dictionary in the Q-table for the current 'state'
        #   For each action, set the Q-value for the state-action pair to 0
        
        ######### state = self.build_state()          # Get current state
        # Current State : a tuple of ('waypoint', 'trafficlight', 'oncoming', 'right', 'left')
        
        # When not learning and for all steps, ...
        self.state = inputs
        self.state['next waypoint']= waypoint
        #self.state['deadline']= deadline
        #state = self.state
        
        w,t,o,r,l = self.state['next waypoint'], self.state['light'], self.state['oncoming'], self.state['right'], self.state['left']
        state = (w,t,o,r,l)
        
        # When learning, ...
        if self.learning:
            # Let's define the actions' dictionary, the internal dictionary 
            self.action_dict = {None:0, 'forward':0, 'right':0, 'left':0}
            
            if state not in self.Q.keys():
                self.Q[state] = self.action_dict

        return state


    def get_maxQ(self, state):
        """ The get_max_Q function is called when the agent is asked to find the
            maximum Q-value of all actions based on the 'state' the smartcab is in. """

        ########### 
        ## TO DO ##
        ###########
        # Calculate the maximum Q-value of all actions for a given state
        maxQ = max(self.Q[state].values())

        
        return maxQ 


    def createQ(self, state):
        """ The createQ function is called when a state is generated by the agent. """

        ########### 
        ## TO DO ##
        ###########
        # When learning, check if the 'state' is not in the Q-table
        # If it is not, create a new dictionary for that state
        #   Then, for each action available, set the initial Q-value to 0.0
        
        # Let's define the actions' dictionary, for the internal dictionary 
        self.action_dict = {None:0.0, 'forward':0.0, 'left':0.0, 'right':0.0}
        
        if not self.learning: # When learning is not enable ... Create Q-table for each possible visited state
            self.Q[state] = self.action_dict
                        
        elif self.learning: # When learning, ...
            if state not in self.Q.keys():
                self.Q[state] = self.action_dict
            
        return


    def choose_action(self, state):
        """ The choose_action function is called when the agent is asked to choose
            which action to take, based on the 'state' the smartcab is in. """

        # Set the agent state and default action
        self.state = state
        self.next_waypoint = self.planner.next_waypoint()
        action = None

        ########### 
        ## TO DO ##
        ###########
        # When not learning, choose a random action
        # When learning, choose a random action with 'epsilon' probability
        #   Otherwise, choose an action with the highest Q-value for the current state
        if not self.learning:
            action = random.choice(self.env.valid_actions)
        elif self.learning:
            # Choose a random action with 'epsilon' probability
            random_value = random.random()
            #print "++++++++++++++++++++++++++"
            #print "random_value : {} || epsilon : {}".format(random_value,self.epsilon)
            #print "++++++++++++++++++++++++++"

            
            if random_value < 1 - self.epsilon:
                # choose an action with the highest Q-value for the current state
                maxQ = self.get_maxQ(state)
                actions_values_dic = {}
                max_actions = []
                # let's get all actions with a Q-value equal to the maxQ
                # We could get several actions with the same max value
                actions_values_dic = self.Q[state]
                for action_item in actions_values_dic:
                    if actions_values_dic[action_item] == maxQ:
                        max_actions.append(action_item)

                # Now we take a random action between all actions corresponding to the maxQ
                action = random.choice(max_actions)
                #print "This is the action :{} | and the Max Q-Value :{} JC : ".format(action, maxQ)
                
            else:
                # Choose a random valid action when we do not use highest Q-value
                action = random.choice(self.env.valid_actions)
            
        return action


    def learn(self, state, action, reward):
        """ The learn function is called after the agent completes an action and
            receives an award. This function does not consider future rewards 
            when conducting learning. """

        ########### 
        ## TO DO ##
        ###########
        # When learning, implement the value iteration update rule
        #   Use only the learning rate 'alpha' (do not use the discount factor 'gamma')
        
        ### Q-Learning USING THE LEARNING RATE alpha 
        ## X = R(state, action)
        ## V = Max[Q(previous state, all actions)]
        ## V <-- (1-&)V + &X
        #self.Q[self.state][action] = (1.0 - self.alpha) * self.Q[self.state][action] + self.alpha * reward

        if self.learning:
            oldv = self.Q[state][action]
            self.Q[state][action] = oldv + self.alpha * (reward - oldv)
            """
            oldv = self.Q.get((state, action), None)
            if oldv is None:
                self.action_dict = {None:0.0, 'forward':0.0, 'left':0.0, 'right':0.0}
                self.Q[state] = self.action_dict
            else:
                #self.Q[(state, action)] = oldv + self.alpha * (reward - oldv)
                self.Q[state][action] = oldv + self.alpha * (reward - oldv)

            #print '+++++++++++++++++++'
            #print 'self.Q : ', self.Q
            #print '+++++++++++++++++++'
            """
        else:
            pass
    
        
        return


    def update(self):
        """ The update function is called when a time step is completed in the 
            environment for a given trial. This function will build the agent
            state, choose an action, receive a reward, and learn if enabled. """

        state = self.build_state()          # Get current state
        self.createQ(state)                 # Create 'state' in Q-table
        action = self.choose_action(state)  # Choose an action
        reward = self.env.act(self, action) # Receive a reward
        self.learn(state, action, reward)   # Q-learn

        return
        

def run():
    """ Driving function for running the simulation. 
        Press ESC to close the simulation, or [SPACE] to pause the simulation. """

    ##############
    # Create the environment
    # Flags:
    #   verbose     - set to True to display additional output from the simulation
    #   num_dummies - discrete number of dummy agents in the environment, default is 100
    #   grid_size   - discrete number of intersections (columns, rows), default is (8, 6)
    #verbose = True
    #num_dummies = 10
    #grid_size = (4, 3)
    env = Environment()
    #env = Environment(verbose = True)
    
    
    
    ##############
    # Create the driving agent
    # Flags:
    #   learning   - set to True to force the driving agent to use Q-learning
    #    * epsilon - continuous value for the exploration factor, default is 1
    #    * alpha   - continuous value for the learning rate, default is 0.5
    #agent = env.create_agent(LearningAgent)
    #agent = env.create_agent(LearningAgent, learning = True)
    agent = env.create_agent(LearningAgent, learning = True, epsilon = 0.97, alpha = 0.505) #A+/A+
    
    ##############
    # Follow the driving agent
    # Flags:
    #   enforce_deadline - set to True to enforce a deadline metric
    env.set_primary_agent(agent, enforce_deadline = True)
    
    
    ##############
    # Create the simulation
    # Flags:
    #   update_delay - continuous time (in seconds) between actions, default is 2.0 seconds
    #   display      - set to False to disable the GUI if PyGame is enabled
    #   log_metrics  - set to True to log trial and simulation results to /logs
    #   optimized    - set to True to change the default log file name
    #display = False
    #sim = Simulator(env, update_delay = 0.0000001, display = True, log_metrics = True)
    sim = Simulator(env, update_delay = 0.00001, display = True, log_metrics = True, optimized = True)
    
    
    
    ##############
    # Run the simulator
    # Flags:
    #   tolerance  - epsilon tolerance before beginning testing, default is 0.05 
    #   n_test     - discrete number of testing trials to perform, default is 0
    #sim.run(n_test = 10)
    sim.run(n_test = 10, tolerance = 0.0001)


if __name__ == '__main__':
    run()
